package com.coding.malwarescanner.service;

import com.coding.malwarescanner.model.CheckEvent;
import com.coding.malwarescanner.model.CheckResultEvent;
import org.apache.commons.lang3.StringUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;

@Service
public class PdfService {
    private final KafkaTemplate<String,CheckResultEvent> kafkaTemplate;

    public PdfService(KafkaTemplate<String, CheckResultEvent> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }
    PDFTextStripper stripper = new PDFTextStripper();

    //This can also be saved in a database
    List<String> blacklistedIbans = List.of("DE15300606010505780780");
    String producerTopic = "check-result-event";


    public void checkIfPdfContainsBlacklistedIban(CheckEvent checkEvent) throws IOException {
        CheckResultEvent checkResultEvent;

        if(!checkEvent.getFileType().equalsIgnoreCase("pdf")) {
            sendWrongFileTypeEvent();
            return;
        }

        /*
        Datei wird heruntergeladen und wird ala download.pdf gespeichert

        downloadFileFromUrl(checkEvent);
        File file = new File("download.pdf");
        */

        //URL ist direkter Verweis auf Testdaten_Rechnungseinreichung.pdf
        File file = new File(checkEvent.getUrl());
        try(PDDocument document = Loader.loadPDF(file)) {
            int numberOfPages = document.getNumberOfPages();
            checkResultEvent = parsePdf(numberOfPages, document);
            System.out.println(checkResultEvent);
        }
        kafkaTemplate.send(producerTopic, checkResultEvent);
    }

    public CheckResultEvent openFileFromController(String url) throws IOException {
     //   downloadFileFromUrl(url);
        File file = new File("Testdaten_Rechnungseinreichung.pdf");
        CheckResultEvent checkResultEvent;

        try(PDDocument document = Loader.loadPDF(file)) {
            int numberOfPages = document.getNumberOfPages();
            checkResultEvent = parsePdf(numberOfPages, document);
        }
        checkResultEvent.setName("BlacklistedIbanCheck");

        return checkResultEvent;
    }

    private String extractIbanFromPage(String pageText) {
        int indexOfIban = pageText.indexOf("IBAN:");
        int indexOfIbanEnd = pageText.indexOf("SWIFT");
        String ibanWithWhitespaces = pageText.substring(indexOfIban, indexOfIbanEnd).replace("IBAN: ", "");

        return StringUtils.deleteWhitespace(ibanWithWhitespaces);
    }

    private void downloadFileFromUrl(String urlString) throws MalformedURLException {
        URL url = new URL(urlString);
        try (InputStream in = url.openStream()) {
            Files.copy(in, Paths.get("download.pdf"), StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
           e.printStackTrace();
        }
    }

    private CheckResultEvent parsePdf(int numberOfPages, PDDocument document) throws IOException {
        CheckResultEvent checkResultEvent = new CheckResultEvent();

        for(int i=1; i<= numberOfPages; i++){
            stripper.setStartPage(i);
            stripper.setEndPage(i);
            String pdfString = stripper.getText(document);
            checkForBlacklistedIban(pdfString, checkResultEvent);
            if(checkResultEvent.getState() != null) {
                if(checkResultEvent.getState().equals(CheckResultEvent.StateEnum.ERROR)) {
                    break;
                }
            }
        }
        return checkResultEvent;
    }

    private void checkForBlacklistedIban(String pdfString, CheckResultEvent checkResultEvent) {
        if(pdfString.contains("IBAN")) {
            String iban = extractIbanFromPage(pdfString);
            if(blacklistedIbans.contains(iban)) {
                checkResultEvent.setState(CheckResultEvent.StateEnum.ERROR);
                checkResultEvent.setDetails("PDF contains blacklisted IBAN");
            }
            else {
                checkResultEvent.setState(CheckResultEvent.StateEnum.OK);
                checkResultEvent.setDetails("PDF check passed successfully.");
            }
        }
    }

    private void sendWrongFileTypeEvent() {
        CheckResultEvent checkResultEvent = new CheckResultEvent();
        checkResultEvent.setDetails("Type of file is not pdf");
        checkResultEvent.setState(CheckResultEvent.StateEnum.ERROR);
        kafkaTemplate.send(producerTopic, checkResultEvent);
    }
}
